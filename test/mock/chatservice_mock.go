// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/benedictweis/tcpchat-server-go/application (interfaces: ChatService)
//
// Generated by this command:
//
//	mockgen -destination=../test/mock/chatservice_mock.go . ChatService
//

// Package mock_application is a generated GoMock package.
package mock_application

import (
	reflect "reflect"

	domain "github.com/benedictweis/tcpchat-server-go/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
	isgomock struct{}
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockChatService) ChangePassword(sessionID, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", sessionID, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockChatServiceMockRecorder) ChangePassword(sessionID, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockChatService)(nil).ChangePassword), sessionID, oldPassword, newPassword)
}

// ChangeUserName mocks base method.
func (m *MockChatService) ChangeUserName(sessionID, newUserName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserName", sessionID, newUserName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserName indicates an expected call of ChangeUserName.
func (mr *MockChatServiceMockRecorder) ChangeUserName(sessionID, newUserName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName", reflect.TypeOf((*MockChatService)(nil).ChangeUserName), sessionID, newUserName)
}

// CreateAccount mocks base method.
func (m *MockChatService) CreateAccount(sessionID, userName, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", sessionID, userName, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockChatServiceMockRecorder) CreateAccount(sessionID, userName, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockChatService)(nil).CreateAccount), sessionID, userName, password)
}

// GetAllLoggedInUserNames mocks base method.
func (m *MockChatService) GetAllLoggedInUserNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLoggedInUserNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllLoggedInUserNames indicates an expected call of GetAllLoggedInUserNames.
func (mr *MockChatServiceMockRecorder) GetAllLoggedInUserNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLoggedInUserNames", reflect.TypeOf((*MockChatService)(nil).GetAllLoggedInUserNames))
}

// GetUserNameForSessionID mocks base method.
func (m *MockChatService) GetUserNameForSessionID(sessionID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNameForSessionID", sessionID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserNameForSessionID indicates an expected call of GetUserNameForSessionID.
func (mr *MockChatServiceMockRecorder) GetUserNameForSessionID(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNameForSessionID", reflect.TypeOf((*MockChatService)(nil).GetUserNameForSessionID), sessionID)
}

// Login mocks base method.
func (m *MockChatService) Login(sessionID, userName, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", sessionID, userName, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockChatServiceMockRecorder) Login(sessionID, userName, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockChatService)(nil).Login), sessionID, userName, password)
}

// QuitSession mocks base method.
func (m *MockChatService) QuitSession(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QuitSession", sessionID)
}

// QuitSession indicates an expected call of QuitSession.
func (mr *MockChatServiceMockRecorder) QuitSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuitSession", reflect.TypeOf((*MockChatService)(nil).QuitSession), sessionID)
}

// RegisterNewSession mocks base method.
func (m *MockChatService) RegisterNewSession(newSession domain.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterNewSession", newSession)
}

// RegisterNewSession indicates an expected call of RegisterNewSession.
func (mr *MockChatServiceMockRecorder) RegisterNewSession(newSession any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewSession", reflect.TypeOf((*MockChatService)(nil).RegisterNewSession), newSession)
}

// SendMessageToSessionFromServer mocks base method.
func (m *MockChatService) SendMessageToSessionFromServer(sessionID, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessageToSessionFromServer", sessionID, message)
}

// SendMessageToSessionFromServer indicates an expected call of SendMessageToSessionFromServer.
func (mr *MockChatServiceMockRecorder) SendMessageToSessionFromServer(sessionID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToSessionFromServer", reflect.TypeOf((*MockChatService)(nil).SendMessageToSessionFromServer), sessionID, message)
}

// SendPrivateMessage mocks base method.
func (m *MockChatService) SendPrivateMessage(sessionID, messagePartnerUserName, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPrivateMessage", sessionID, messagePartnerUserName, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPrivateMessage indicates an expected call of SendPrivateMessage.
func (mr *MockChatServiceMockRecorder) SendPrivateMessage(sessionID, messagePartnerUserName, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPrivateMessage", reflect.TypeOf((*MockChatService)(nil).SendPrivateMessage), sessionID, messagePartnerUserName, message)
}

// SendTextMessageToEveryone mocks base method.
func (m *MockChatService) SendTextMessageToEveryone(sessionID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextMessageToEveryone", sessionID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTextMessageToEveryone indicates an expected call of SendTextMessageToEveryone.
func (mr *MockChatServiceMockRecorder) SendTextMessageToEveryone(sessionID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMessageToEveryone", reflect.TypeOf((*MockChatService)(nil).SendTextMessageToEveryone), sessionID, message)
}
